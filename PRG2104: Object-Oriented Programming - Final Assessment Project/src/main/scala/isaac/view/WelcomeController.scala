// Defines controllers for the welcome screen and navigation to other views
package isaac.view
// Imports for JavaFX FXML loading, scene management, event handling, and dialogs
import javafx.fxml.{FXML, FXMLLoader}
import javafx.scene.{Parent, Node, Scene}
import javafx.scene.control.{Alert, Label, ScrollPane}
import javafx.scene.control.Alert.AlertType
import javafx.stage.{Modality, Stage, Window}
import javafx.event.ActionEvent

class WelcomeController {
  // Handles the Continue button click by loading the Dashboard view into the primary stage
  @FXML
  def handleContinue(event: ActionEvent): Unit = {
    // Retrieve the current window (Stage) from the event source
    val currentStage = event.getSource
      .asInstanceOf[Node]
      .getScene
      .getWindow
      .asInstanceOf[Stage]

    // Load the DashboardView.fxml layout
    var loader: FXMLLoader = null
    val possiblePaths = Array(
      "/view/DashboardView.fxml",
      "/isaac/view/DashboardView.fxml",
      "/DashboardView.fxml",
      "DashboardView.fxml"
    )

    for (path <- possiblePaths if loader == null) {
      val resource = getClass.getResource(path)
      if (resource != null) {
        loader = new FXMLLoader(resource)
        println(s"Found FXML at: $path")
      }
    }

    if (loader == null) {
      println("Error: Could not find DashboardView.fxml in any expected location")
      return
    }

    val root: Parent = loader.load()

    // Set the new scene and update the window title
    currentStage.setScene(new Scene(root))
    currentStage.setTitle("NutriTrack: A Nutrition Information Database – Dashboard")
  }

  // Handles the About button click by showing an informational dialog
  @FXML
  def handleAbout(event: ActionEvent): Unit = {
    val aboutText = """NutriTrack v1.0 - A Comprehensive Nutrition Information Database

🥗 Features:
• Search and browse nutritional information for thousands of foods.
• Analyse macronutrients, vitamins, and minerals.
• Compare nutritional profiles between different foods.
• Track daily nutritional intake and goals.
• Built-in recipe calculator and meal planning tools.

🔬 Data Sources:
• Nutritional data generated using Microsoft Copilot.
• Standardised to 100-gram serving sizes for consistency.
• Covers macronutrients, vitamins, and minerals for common foods.

⚡ Built with:
• Scala programming language.
• JavaFX for a modern desktop interface.

👨‍💻 Developer: Lee Ming Hui Isaac
📧  Contact: 22057301@imail.sunway.edu.my
📁  GitHub: https://github.com/sunwaydcis/final-project-LeeIsaac1201

⚠️ Disclaimer: Nutritional values are generated by artificial intelligence estimates for educational purposes.
Please consult with healthcare professionals for personalised nutrition advice.

© 2025 Lee Ming Hui Isaac. All rights reserved."""

    // Create a scrollable label for the content
    val contentLabel = new Label(aboutText)
    contentLabel.setWrapText(true)
    contentLabel.setMaxWidth(480)
    contentLabel.setStyle("-fx-text-fill: #2c3e50; -fx-font-size: 13px;")

    val scrollPane = new ScrollPane(contentLabel)
    scrollPane.setFitToWidth(true)
    scrollPane.setPrefSize(500, 350)
    scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER)
    scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.AS_NEEDED)
    scrollPane.setStyle("-fx-background: transparent; -fx-background-color: transparent;")

    // Create a container with semi-transparent overlay (no background image)
    val backgroundPane = new javafx.scene.layout.StackPane()

    val overlayPane = new javafx.scene.layout.StackPane()
    overlayPane.setStyle("-fx-background-color: rgba(255, 255, 255, 0.9); -fx-padding: 20;")
    overlayPane.getChildren.add(scrollPane)

    backgroundPane.getChildren.add(overlayPane)

    val alert = new Alert(AlertType.INFORMATION) {
      initModality(Modality.APPLICATION_MODAL)
      setTitle("About NutriTrack")
      setHeaderText("About This Application")

      // Set the background container as content
      getDialogPane.setContent(backgroundPane)
      getDialogPane.setPrefWidth(550)
      getDialogPane.setPrefHeight(450)
      setResizable(true)

      // Style the dialog's pane header
      getDialogPane.setStyle("-fx-background-color: #f8f9fa;")
    }

    // Change the OK button text to "Okay" and improve its design
    val okButton = alert.getDialogPane.lookupButton(javafx.scene.control.ButtonType.OK)
    val styledButton = okButton.asInstanceOf[javafx.scene.control.Button]
    styledButton.setText("Okay")
    styledButton.setStyle(
      "-fx-background-color: #3498db; " +
        "-fx-text-fill: white; " +
        "-fx-font-size: 14px; " +
        "-fx-font-weight: bold; " +
        "-fx-padding: 10 24; " +
        "-fx-background-radius: 8; " +
        "-fx-border-color: #2980b9; " +
        "-fx-border-width: 2; " +
        "-fx-border-radius: 8; " +
        "-fx-cursor: hand;"
    )

    // Set the dialog's owner to the current window
    val owner: Window = event.getSource
      .asInstanceOf[Node]
      .getScene
      .getWindow
    alert.initOwner(owner)
    alert.showAndWait()
  }
}
